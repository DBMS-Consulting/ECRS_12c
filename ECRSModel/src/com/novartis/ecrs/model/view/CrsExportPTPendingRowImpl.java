package com.novartis.ecrs.model.view;

import java.math.BigDecimal;

import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 20 01:20:51 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CrsExportPTPendingRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        CrsId {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getCrsId();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CrsName {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getCrsName();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SafetyTopicOfInterest {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getSafetyTopicOfInterest();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RiskPurposeList {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getRiskPurposeList();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MeddraTerm {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getMeddraTerm();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PtName {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getPtName();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PtCode {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getPtCode();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DomainName {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getDomainName();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RowKey {
            protected Object get(CrsExportPTPendingRowImpl obj) {
                return obj.getRowKey();
            }

            protected void put(CrsExportPTPendingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(CrsExportPTPendingRowImpl object);

        protected abstract void put(CrsExportPTPendingRowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CRSID = AttributesEnum.CrsId.index();
    public static final int CRSNAME = AttributesEnum.CrsName.index();
    public static final int SAFETYTOPICOFINTEREST = AttributesEnum.SafetyTopicOfInterest.index();
    public static final int RISKPURPOSELIST = AttributesEnum.RiskPurposeList.index();
    public static final int MEDDRATERM = AttributesEnum.MeddraTerm.index();
    public static final int PTNAME = AttributesEnum.PtName.index();
    public static final int PTCODE = AttributesEnum.PtCode.index();
    public static final int DOMAINNAME = AttributesEnum.DomainName.index();
    public static final int ROWKEY = AttributesEnum.RowKey.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CrsExportPTPendingRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CrsId.
     * @return the CrsId
     */
    public BigDecimal getCrsId() {
        return (BigDecimal) getAttributeInternal(CRSID);
    }

    /**
     * Gets the attribute value for the calculated attribute CrsName.
     * @return the CrsName
     */
    public String getCrsName() {
        return (String) getAttributeInternal(CRSNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute SafetyTopicOfInterest.
     * @return the SafetyTopicOfInterest
     */
    public String getSafetyTopicOfInterest() {
        return (String) getAttributeInternal(SAFETYTOPICOFINTEREST);
    }

    /**
     * Gets the attribute value for the calculated attribute RiskPurposeList.
     * @return the RiskPurposeList
     */
    public String getRiskPurposeList() {
        return (String) getAttributeInternal(RISKPURPOSELIST);
    }

    /**
     * Gets the attribute value for the calculated attribute MeddraTerm.
     * @return the MeddraTerm
     */
    public String getMeddraTerm() {
        return (String) getAttributeInternal(MEDDRATERM);
    }

    /**
     * Gets the attribute value for the calculated attribute PtName.
     * @return the PtName
     */
    public String getPtName() {
        return (String) getAttributeInternal(PTNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute PtCode.
     * @return the PtCode
     */
    public String getPtCode() {
        return (String) getAttributeInternal(PTCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute DomainName.
     * @return the DomainName
     */
    public String getDomainName() {
        return (String) getAttributeInternal(DOMAINNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute RowKey.
     * @return the RowKey
     */
    public RowID getRowKey() {
        return (RowID) getAttributeInternal(ROWKEY);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

