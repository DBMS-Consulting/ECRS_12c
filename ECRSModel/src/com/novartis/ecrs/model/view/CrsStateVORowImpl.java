package com.novartis.ecrs.model.view;

import com.novartis.ecrs.model.entity.CrsStateEOImpl;

import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 22 02:03:35 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CrsStateVORowImpl extends ViewRowImpl {
    public static final int ENTITY_CRSSTATEEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        StateId {
            protected Object get(CrsStateVORowImpl obj) {
                return obj.getStateId();
            }

            protected void put(CrsStateVORowImpl obj, Object value) {
                obj.setStateId((Integer) value);
            }
        }
        ,
        StateName {
            protected Object get(CrsStateVORowImpl obj) {
                return obj.getStateName();
            }

            protected void put(CrsStateVORowImpl obj, Object value) {
                obj.setStateName((String) value);
            }
        }
        ,
        StateDesc {
            protected Object get(CrsStateVORowImpl obj) {
                return obj.getStateDesc();
            }

            protected void put(CrsStateVORowImpl obj, Object value) {
                obj.setStateDesc((String) value);
            }
        }
        ,
        ActiveFlag {
            protected Object get(CrsStateVORowImpl obj) {
                return obj.getActiveFlag();
            }

            protected void put(CrsStateVORowImpl obj, Object value) {
                obj.setActiveFlag((String) value);
            }
        }
        ,
        CrsContentVO {
            protected Object get(CrsStateVORowImpl obj) {
                return obj.getCrsContentVO();
            }

            protected void put(CrsStateVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(CrsStateVORowImpl object);

        protected abstract void put(CrsStateVORowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int STATEID = AttributesEnum.StateId.index();
    public static final int STATENAME = AttributesEnum.StateName.index();
    public static final int STATEDESC = AttributesEnum.StateDesc.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int CRSCONTENTVO = AttributesEnum.CrsContentVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CrsStateVORowImpl() {
    }

    /**
     * Gets CrsStateEO entity object.
     * @return the CrsStateEO
     */
    public CrsStateEOImpl getCrsStateEO() {
        return (CrsStateEOImpl) getEntity(ENTITY_CRSSTATEEO);
    }

    /**
     * Gets the attribute value for STATE_ID using the alias name StateId.
     * @return the STATE_ID
     */
    public Integer getStateId() {
        return (Integer) getAttributeInternal(STATEID);
    }

    /**
     * Sets <code>value</code> as attribute value for STATE_ID using the alias name StateId.
     * @param value value to set the STATE_ID
     */
    public void setStateId(Integer value) {
        setAttributeInternal(STATEID, value);
    }

    /**
     * Gets the attribute value for STATE_NAME using the alias name StateName.
     * @return the STATE_NAME
     */
    public String getStateName() {
        return (String) getAttributeInternal(STATENAME);
    }

    /**
     * Sets <code>value</code> as attribute value for STATE_NAME using the alias name StateName.
     * @param value value to set the STATE_NAME
     */
    public void setStateName(String value) {
        setAttributeInternal(STATENAME, value);
    }

    /**
     * Gets the attribute value for STATE_DESC using the alias name StateDesc.
     * @return the STATE_DESC
     */
    public String getStateDesc() {
        return (String) getAttributeInternal(STATEDESC);
    }

    /**
     * Sets <code>value</code> as attribute value for STATE_DESC using the alias name StateDesc.
     * @param value value to set the STATE_DESC
     */
    public void setStateDesc(String value) {
        setAttributeInternal(STATEDESC, value);
    }

    /**
     * Gets the attribute value for ACTIVE_FLAG using the alias name ActiveFlag.
     * @return the ACTIVE_FLAG
     */
    public String getActiveFlag() {
        return (String) getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for ACTIVE_FLAG using the alias name ActiveFlag.
     * @param value value to set the ACTIVE_FLAG
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link CrsContentVO.
     */
    public RowIterator getCrsContentVO() {
        return (RowIterator) getAttributeInternal(CRSCONTENTVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

