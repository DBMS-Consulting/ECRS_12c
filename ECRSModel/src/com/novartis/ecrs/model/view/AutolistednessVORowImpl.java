package com.novartis.ecrs.model.view;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun May 10 15:51:59 IST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AutolistednessVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        CrsId {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getCrsId();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CrsName {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getCrsName();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CompoundCode {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getCompoundCode();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CompoundType {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getCompoundType();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CompoundDesc {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getCompoundDesc();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ActiveFlag {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getActiveFlag();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        GenericName {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getGenericName();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TradeName {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getTradeName();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Indication {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getIndication();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        StateId {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getStateId();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Listedness {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getListedness();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UpdatableListedness {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getUpdatableListedness();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setUpdatableListedness((String) value);
            }
        }
        ,
        YesOrNoVA {
            protected Object get(AutolistednessVORowImpl obj) {
                return obj.getYesOrNoVA();
            }

            protected void put(AutolistednessVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;


        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }


        protected abstract Object get(AutolistednessVORowImpl object);

        protected abstract void put(AutolistednessVORowImpl object, Object value);
    }


    public static final int CRSID = AttributesEnum.CrsId.index();
    public static final int CRSNAME = AttributesEnum.CrsName.index();
    public static final int COMPOUNDCODE = AttributesEnum.CompoundCode.index();
    public static final int COMPOUNDTYPE = AttributesEnum.CompoundType.index();
    public static final int COMPOUNDDESC = AttributesEnum.CompoundDesc.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int GENERICNAME = AttributesEnum.GenericName.index();
    public static final int TRADENAME = AttributesEnum.TradeName.index();
    public static final int INDICATION = AttributesEnum.Indication.index();
    public static final int STATEID = AttributesEnum.StateId.index();
    public static final int LISTEDNESS = AttributesEnum.Listedness.index();
    public static final int UPDATABLELISTEDNESS = AttributesEnum.UpdatableListedness.index();
    public static final int YESORNOVA = AttributesEnum.YesOrNoVA.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AutolistednessVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CrsId.
     * @return the CrsId
     */
    public Long getCrsId() {
        return (Long) getAttributeInternal(CRSID);
    }


    /**
     * Gets the attribute value for the calculated attribute CrsName.
     * @return the CrsName
     */
    public String getCrsName() {
        return (String) getAttributeInternal(CRSNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute CompoundCode.
     * @return the CompoundCode
     */
    public String getCompoundCode() {
        return (String) getAttributeInternal(COMPOUNDCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute CompoundType.
     * @return the CompoundType
     */
    public String getCompoundType() {
        return (String) getAttributeInternal(COMPOUNDTYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute CompoundDesc.
     * @return the CompoundDesc
     */
    public String getCompoundDesc() {
        return (String) getAttributeInternal(COMPOUNDDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute ActiveFlag.
     * @return the ActiveFlag
     */
    public String getActiveFlag() {
        return (String) getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Gets the attribute value for the calculated attribute GenericName.
     * @return the GenericName
     */
    public String getGenericName() {
        return (String) getAttributeInternal(GENERICNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute TradeName.
     * @return the TradeName
     */
    public String getTradeName() {
        return (String) getAttributeInternal(TRADENAME);
    }

    /**
     * Gets the attribute value for the calculated attribute Indication.
     * @return the Indication
     */
    public String getIndication() {
        return (String) getAttributeInternal(INDICATION);
    }

    /**
     * Gets the attribute value for the calculated attribute StateId.
     * @return the StateId
     */
    public Integer getStateId() {
        return (Integer) getAttributeInternal(STATEID);
    }

    /**
     * Gets the attribute value for the calculated attribute Listedness.
     * @return the Listedness
     */
    public String getListedness() {
        return (String) getAttributeInternal(LISTEDNESS);
    }

    /**
     * Gets the attribute value for the calculated attribute UpdatableListedness.
     * @return the UpdatableListedness
     */
    public String getUpdatableListedness() {
        if(getAttributeInternal(UPDATABLELISTEDNESS) == null)
        return (String) getAttributeInternal(LISTEDNESS);
        else
        return (String) getAttributeInternal(UPDATABLELISTEDNESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UpdatableListedness.
     * @param value value to set the  UpdatableListedness
     */
    public void setUpdatableListedness(String value) {
        setAttributeInternal(UPDATABLELISTEDNESS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesOrNoVA.
     */
    public RowSet getYesOrNoVA() {
        return (RowSet) getAttributeInternal(YESORNOVA);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

